installed PiTFT as resistiv with x and 90 degree orientation

sudo apt-get install -y git python3-pip
sudo apt-get install fbi
sudo apt-get install sox
sudo apt-get install evtest tslib libts-bin
sudo apt-get install vim

edit /ect/hostname and /etc/hosts to update to something easier to type

sudo pip3 install --upgrade adafruit-python-shell click==7.0
git clone https://github.com/adafruit/Raspberry-Pi-Installer-Scripts.git
cd Raspberry-Pi-Installer-Scripts
sudo python3 adafruit-pitft.py

sudo pip3 install netifaces

After much rework, I've decided to follow the instrucitons at
https://raspberrypi.stackexchange.com/questions/88954/workaround-for-a-wifi-bridge-on-a-raspberry-pi-with-proxy-arp/
in the Dynamic configuration of proxy arp with monitoring interfaces section as
that appears to be more or less exactly what I want and may be more stable than
bridging or routing. However this didnt' work so choosing a nother option.

instead we fall back to the more complex but hopefully more useful
https://raspberrypi.stackexchange.com/questions/89803/access-point-as-wifi-router-repeater-optional-with-bridge/89804#89804

not currently implementing the firware bits, but may have to if this isn't happy

we don't remove all aspects of classic networking and instead simply remove the
relevant interfaces from /etc/dhcpcd.conf so that there is no fighting between
daemons. By leaving dhcpcd enabled there may be support for plug in adapters :

denyinterfaces eth0
denyinterfaces wlan0

actually removing afterall

sudo -Es
apt --autoremove purge ifupdown dhcpcd5 isc-dhcp-client isc-dhcp-common rsyslog
apt-mark hold ifupdown dhcpcd5 isc-dhcp-client isc-dhcp-common rsyslog raspberrypi-net-mods openresolv
rm -rf /etc/network /etc/dhcp

# setup/enable systemd-resolved and systemd-networkd
#apt --autoremove purge avahi-daemon # need to add back avahi for shairport sync
#apt-mark hold avahi-daemon libnss-mdns
apt install libnss-resolve
ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
systemctl enable systemd-networkd.service systemd-resolved.service

sudo apt-get install hostapd
create /etc/hostapd/hostapd.conf
driver=nl80211
ssid=XAir-XR18
country_code=US
hw_mode=g
channel=1
auth_algs=1
wpa=2
wpa_passphrase=XAirXAir
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
bridge=br0

sudo chmod 600 /etc/hostapd/hostapd.conf

now create an accesspoint service to make this do it thing
sudo systemctl edit --force --full accesspoint@.service

[Unit]
Description=accesspoint with hostapd (interface-specific version)
Wants=wpa_supplicant@%i.service

[Service]
ExecStartPre=/sbin/iw dev %i interface add ap@%i type __ap
ExecStart=/usr/sbin/hostapd -i ap@%i /etc/hostapd/hostapd.conf
ExecStopPost=-/sbin/iw dev ap@%i del

[Install]
WantedBy=sys-subsystem-net-devices-%i.device

and enable
sudo systemctl enable accesspoint@wlan0.service

Notes: switching from wpa_supplicant to wpa_supplicant-wlan0 switches to the
interface specific version of the service rather than the config all/any
interfaces version which is more likely to work in the one interface case but
less likely to give the correct interface the correct network.

the end of /etc/wpa_supplicant/wpa_supplicant.conf add relevant additional SSID
and password combinations: 

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	ssid="igor" # phone hot spot
	psk="XXXX" # Password here no spaces, quoted
	key_mgmt=WPA-PSK
	priority=2
}
network={
	ssid="Air" # roaming network
	psk="XXXX" # Password here no spaces, quoted
	key_mgmt=WPA-PSK
	priority=3 # priority for roaming access
}
network={
	ssid="homenetwork2" # primary network
	psk="XXXX" # Password here no spaces, quoted
	key_mgmt=WPA-PSK
	priority=4 #reasonably high priority
}
network={
	ssid="XR18-1D-B9-96" # connect to the XR18 if it is in hotspot mode
	key_mgmt=NONE
	priority=5 #higher priority
}

then switch the service type

sudo systemctl disable wpa_supplicant.service
sudo systemctl enable wpa_supplicant@wlan0.service

and hide the passwords
sudo chmod 600 /etc/wpa_supplicant/wpa_supplicant-wlan0.conf

sudo systemctl edit wpa_supplicant@wlan0.service

[Unit]
BindsTo=accesspoint@%i.service
After=accesspoint@%i.service

[Service]
ExecStartPost=/lib/systemd/systemd-networkd-wait-online --interface=%i --timeout=60 --quiet
ExecStartPost=/bin/ip link set ap@%i up
ExecStopPost=-/bin/ip link set ap@%i up

setup the interfaces as per the instructions 

setup the networks

sudo vi /etc/systemd/network/08-wlan0.network
[Match]
Name=wlan0
[Network]
#IPForward=yes
LLMNR=no
MulticastDNS=yes
DHCP=yes

sudo vi /etc/systemd/network/02-br0.netdev
[NetDev]
Name=br0
Kind=bridge

sudo vi /etc/systemd/network/04-eth0.network
[Match]
Name=eth0
[Network]
Bridge=br0

sudo vi /etc/systemd/network/16-br0_up.network
[Match]
Name=br0
[Network]
IPMasquerade=yes
Address=192.168.50.1/24
DHCPServer=yes
[DHCPServer]
DNS=1.1.1.1 8.8.8.8 9.9.9.9

Notes

pi@raspi:~ $ cat /proc/sys/net/ipv4/ip_forward
pi@raspi:~ $ sudo route del default dev ap@wlan0
route
systemctl status systemd-networkd


older thoughts an other potentially relevant stackexchange articles

based on https://raspberrypi.stackexchange.com/questions/88214/setting-up-a-raspberry-pi-as-an-access-point-the-easy-way
plus additional information from https://raspberrypi.stackexchange.com/questions/89803/access-point-as-wifi-router-repeater-optional-with-bridge/89804#89804
and https://raspberrypi.stackexchange.com/questions/95072/access-point-as-wifi-router-repeater-with-additional-wifi-dongle/95073#95073

failed instructions for arp bridge

first install ifplugd based on https://raspberrypi.stackexchange.com/questions/96604/make-ifplugd-available-with-systemd/

then disable dhcpcd et all from general seup on the pi-with-proxy-arp

sudo apt-get install parprouted dhcp-helper
sudo systemctl stop dhcp-helper
sudo systemctl enable dhcp-helper
